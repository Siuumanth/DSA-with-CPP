#include<iostream>
#include<vector>
#include<stack>
#include <algorithm>
using namespace std;



//approach 1 - O(nlogn)
class Solution {
public:
    int maximumBags(vector<int>& capacity, vector<int>& rocks, int extra) {
        int ans = 0;
        vector<int> diff(rocks.size());
        for(int i = 0; i < rocks.size() ; i++){
           diff[i] = capacity[i] - rocks[i];
        }
        
        sort(diff.begin(),diff.end());
        for(int i = 0; i < rocks.size() ; i++){
            if(diff[i]==0){
                ans++;
                continue;
            }
            while(diff[i] > 0 && extra>0 ){
                extra--;
                diff[i]--;
                if(diff[i] == 0){
                    ans++;
                    break;
                }
            }
        }
        return ans;
    }
};


//best solution with O(nlogn), with lesser space complexity
class Solution {
public:
    int maximumBags(vector<int>& C, vector<int>& R, int e) {
        int ans = 0;
        for(int i = 0; i < R.size() ; i++) R[i] = C[i] - R[i];
        sort(R.begin(),R.end());
        for(int i = 0; i < R.size() && R[i] - e <=0 ; i++){
            ans++;
            e-=R[i];
        }
        return ans;
    }
};